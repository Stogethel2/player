<script lang="ts">
  let { children } = $props();
  import Navbar from "../common/components/navbar/navbar.svelte";
  import "../app.css";
  import { page } from "$app/stores";
  import { onMount } from "svelte";
  import { loginApi } from '$lib/api/login';

  let isLoginPage = $state(false);
  // svelte-ignore non_reactive_update
  let token: string;
  let isLoaded = $state(false);

  let queryParams: any = {};

  queryParams = Object.fromEntries($page.url.searchParams.entries());
  token = queryParams.token;
  console.log('token:', token);
  // svelte-ignore non_reactive_update
  let username = '';
  

  const login = async (): Promise<void> => {
    let responseGetUsers = await loginApi.getUsers(token);
    console.log('responseGetUsers:', responseGetUsers);
    username = responseGetUsers.username;
    // if(username != ''){
    //   isLoaded = true;
    // }
  }
  
  onMount(async () => {
    try {
      login();
      //login 
      // let loginData = await loginApi.seamlesslogin();
      // /* Work in progress */
      // if(loginData.status){
      //   let token = loginData.data.split('token=')[1];
      //   let responseGetUsers = await loginApi.getUsers(token);
      //   if(responseGetUsers){
      //     username = responseGetUsers.username;
      //   }
      // }

    } catch (error) {
      console.error("Error fetching settings:", error);
    } finally {
      isLoaded = true;
    }
  });
  $effect(() => {
    if ($page.url.pathname === "/login") {
      isLoginPage = true;
    }
  })
</script>

{#if !isLoginPage && isLoaded}
  <Navbar name = {username}/>
  {@render children()}
{/if}
